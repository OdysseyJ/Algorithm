{\rtf1\ansi\ansicpg949\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 Menlo-BoldItalic;\f4\fnil\fcharset0 Menlo-Italic;\f5\fnil\fcharset129 AppleSDGothicNeo-Regular;
}
{\colortbl;\red255\green255\blue255;\red106\green62\blue62;\red42\green0\blue255;\red127\green0\blue85;
\red0\green0\blue192;}
{\*\expandedcolortbl;;\csgenericrgb\c41569\c24314\c24314;\csgenericrgb\c16471\c0\c100000;\csgenericrgb\c49804\c0\c33333;
\csgenericrgb\c0\c0\c75294;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 2\
\pard\pardeftab720\partightenfactor0

\f1 \cf0 String \cf2 logs\cf0  = \cf3 "2019/05/01 00:59:19\\n"\cf0  + \
				\cf3 "2019/06/01 01:35:20\\n"\cf0  + \
				\cf3 "2019/08/01 02:01:22\\n"\cf0  + \
				\cf3 "2019/08/01 02:01:23\\n"\cf0  + \
				\cf3 "2019/08/02 03:02:35\\n"\cf0  + \
				\cf3 "2019/10/03 04:05:40\\n"\cf0  + \
				\cf3 "2019/10/04 06:23:10\\n"\cf0  + \
				\cf3 "2019/10/10 08:23:20\\n"\cf0  + \
				\cf3 "2019/10/12 08:42:24\\n"\cf0  + \
				\cf3 "2019/10/23 08:43:26\\n"\cf0  + \
				\cf3 "2019/11/14 08:43:29\\n"\cf0  + \
				\cf3 "2019/11/01 10:19:02\\n"\cf0  + \
				\cf3 "2019/12/01 11:23:10"\cf0 ;\
		StringTokenizer \cf2 stk\cf0  = 
\f2\b \cf4 new
\f1\b0 \cf0  StringTokenizer(\cf2 logs\cf0 , \cf3 "\\n"\cf0 );\
		
\f2\b \cf4 int
\f1\b0 \cf0 [] \cf2 timecount\cf0  = 
\f2\b \cf4 new
\f1\b0 \cf0  
\f2\b \cf4 int
\f1\b0 \cf0 [24];\
		
\f2\b \cf4 while
\f1\b0 \cf0 (\cf2 stk\cf0 .hasMoreTokens()) \{\
			String \cf2 temp\cf0  = \cf2 stk\cf0 .nextToken();\
			StringTokenizer \cf2 stk2\cf0  = 
\f2\b \cf4 new
\f1\b0 \cf0  StringTokenizer(\cf2 temp\cf0 ,\cf3 " "\cf0 );\
			\cf2 stk2\cf0 .nextToken();\
			String \cf2 time\cf0  = \cf2 stk2\cf0 .nextToken();\
			StringTokenizer \cf2 stk3\cf0  = 
\f2\b \cf4 new
\f1\b0 \cf0  StringTokenizer(\cf2 time\cf0 ,\cf3 ":"\cf0 );\
			String \cf2 hour\cf0  = \cf2 stk3\cf0 .nextToken();\
			System.
\f3\i\b \cf5 out
\f1\i0\b0 \cf0 .println(\cf2 hour\cf0 );\
			
\f2\b \cf4 int
\f1\b0 \cf0  \cf2 koreantime\cf0  = Integer.
\f4\i parseInt
\f1\i0 (\cf2 hour\cf0 )+9;\
			\cf2 timecount\cf0 [\cf2 koreantime\cf0 ]++;\
		\}\
3\
\pard\pardeftab720\partightenfactor0

\f2\b \cf4 int
\f1\b0 \cf0 [] \cf2 prices\cf0  = \{13000, 88000, 10000\};\
		
\f2\b \cf4 int
\f1\b0 \cf0 [] \cf2 discounts\cf0  = \{30, 20\};\
		
\f2\b \cf4 int
\f1\b0 \cf0 [] \cf2 prices2\cf0  = 
\f2\b \cf4 new
\f1\b0 \cf0  
\f2\b \cf4 int
\f1\b0 \cf0 [\cf2 prices\cf0 .\cf5 length\cf0 ];\
		
\f2\b \cf4 int
\f1\b0 \cf0 [] \cf2 discounts2\cf0  = 
\f2\b \cf4 new
\f1\b0 \cf0  
\f2\b \cf4 int
\f1\b0 \cf0 [\cf2 discounts\cf0 .\cf5 length\cf0 ];\
		
\f2\b \cf4 for
\f1\b0 \cf0  (
\f2\b \cf4 int
\f1\b0 \cf0  \cf2 k\cf0  = 0; \cf2 k\cf0  < \cf2 prices\cf0 .\cf5 length\cf0 ; \cf2 k\cf0 ++) \{\
			\cf2 prices2\cf0 [\cf2 k\cf0 ] = \cf2 prices\cf0 [\cf2 k\cf0 ];\
		\}\
		
\f2\b \cf4 for
\f1\b0 \cf0  (
\f2\b \cf4 int
\f1\b0 \cf0  \cf2 k\cf0  = 0; \cf2 k\cf0  < \cf2 discounts\cf0 .\cf5 length\cf0 ; \cf2 k\cf0 ++) \{\
			\cf2 discounts2\cf0 [\cf2 k\cf0 ] = \cf2 discounts\cf0 [\cf2 k\cf0 ];\
		\}\
		\
		Arrays.
\f4\i sort
\f1\i0 (\cf2 prices2\cf0 );\
		Arrays.
\f4\i sort
\f1\i0 (\cf2 discounts2\cf0 );\
		
\f2\b \cf4 int
\f1\b0 \cf0  \cf2 sum\cf0  = 0;\
		
\f2\b \cf4 int
\f1\b0 \cf0  \cf2 \ul \ulc2 gap\cf0 \ulnone  = \cf2 prices2\cf0 .\cf5 length\cf0 -\cf2 discounts2\cf0 .\cf5 length\cf0 ;\
\
		
\f2\b \cf4 int
\f1\b0 \cf0  \cf2 dindex\cf0  = \cf2 discounts2\cf0 .\cf5 length\cf0 -1;\
		
\f2\b \cf4 for
\f1\b0 \cf0  (
\f2\b \cf4 int
\f1\b0 \cf0  \cf2 i\cf0  = \cf2 prices2\cf0 .\cf5 length\cf0 -1; \cf2 i\cf0  >= 0; \cf2 i\cf0 --) \{\
			
\f2\b \cf4 if
\f1\b0 \cf0  (\cf2 dindex\cf0  >= 0) \{\
			
\f2\b \cf4 double
\f1\b0 \cf0  \cf2 temp\cf0  = (
\f2\b \cf4 double
\f1\b0 \cf0 )\cf2 prices2\cf0 [\cf2 i\cf0 ] - (
\f2\b \cf4 double
\f1\b0 \cf0 )\cf2 prices2\cf0 [\cf2 i\cf0 ] * ((
\f2\b \cf4 double
\f1\b0 \cf0 )\cf2 discounts2\cf0 [\cf2 dindex\cf0 ]*0.01);\
			\cf2 dindex\cf0 --;\
			\cf2 sum\cf0  += (
\f2\b \cf4 int
\f1\b0 \cf0 )\cf2 temp\cf0 ;\
			\}\
			
\f2\b \cf4 else
\f1\b0 \cf0  \{\
				\cf2 sum\cf0  += \cf2 prices2\cf0 [\cf2 i\cf0 ];\
			\}\
		\}\
		System.
\f3\i\b \cf5 out
\f1\i0\b0 \cf0 .println(\cf2 sum\cf0 );\
\
4.\
\
int logintoken = 0;\
		boolean[] rarray = new boolean[actions.length];\
		int[] cart = new int[actions.length];\
		for (int i = 0; i < actions.length; i++) \{\
		StringTokenizer stk = new StringTokenizer(actions[i], " ");\
		switch(stk.nextToken()) \{\
		case "ADD":\{\
			if (logintoken == 1) \{\
				cart[i] = Math.abs(Integer.parseInt(stk.nextToken()))+1;\
				rarray[i] = true;\
			\}\
			else \{\
				rarray[i] = false;\
			\}\
			break;\
		\}\
		case "LOGIN":\{\
			if (logintoken == 0) \{\
				String inputid = stk.nextToken();\
				String inputpw = stk.nextToken();\
				for (int j = 0; j < infos.length; j++) \{\
					StringTokenizer stk2 = new StringTokenizer(infos[j], " ");\
					String id = stk2.nextToken();\
					String pw = stk2.nextToken();\
					if (inputid.equals(id) && inputpw.equals(pw)) \{\
						rarray[i] = true;\
						logintoken = 1;\
					\}\
				\}\
			\}\
			else \{\
				rarray[i] = false;\
			\}\
			break;\
		\}\
		case "ORDER":\{\
			if (logintoken == 1) \{\
				for (int j = 0; j < cart.length; j++) \{\
					if (cart[j] != 0) \{\
						rarray[i] = true;\
					\}\
					cart[j] = 0;\
				\}\
			\}\
			else \{\
				rarray[i] = false;\
			\}\
			break;\
		\}\
		\}\
		\}\
        return rarray;\
\
\
5.\
final int PIG_RECIPE = 4;\
		final int YANGPA_RECIPE = 50;\
		final int PA_RECIPE = 10;\
		final int MANEL_RECIPE = 10;\
		final int GOCHU_RECIPE = 4;\
		\
		final int PIG_PRICE = 10000;\
		final int YANGPA_PRICE = 3000;\
		final int PA_PRICE = 1000;\
		final int MANEL_PRICE = 2000;\
		final int GOCHU_PRICE = 1000;\
		\
		final int PIG_PURCHASE = 10;\
		final int YANGPA_PURCHASE = 100;\
		final int PA_PURCHASE = 30;\
		final int MANEL_PURCHASE = 50;\
		final int GOCHU_PURCHASE = 10;\
		\
		// 
\f5 \'c7\'f6\'c0\'e7
\f1  
\f5 \'b3\'c3\'c0\'e5\'b0\'ed
\f1 \
		int pig = 5;\
		int yangpa = 100;\
		int pa = 10;\
		int manel = 5;\
		int gochu = 2;\
		\
		ArrayList<Integer> resultprice = new ArrayList<Integer>();\
		\
		for (int i = 0; i < history.length; i++) \{\
			double inbun = Double.parseDouble(history[i]);\
			int price = 0;\
			// 
\f5 \'c1\'d8
\f1  1
\f5 \'c0\'ce\'ba\'d0
\f1  \
			if (inbun == 1.0) \{\
				int totalpig = PIG_RECIPE * 1;\
				int totalyangpa = YANGPA_RECIPE * 1;\
				int totalpa = PA_RECIPE * 1;\
				int totalmanel = MANEL_RECIPE * 1;\
				int totalgochu = GOCHU_RECIPE * 1;\
				while(pig < totalpig) \{\
					pig += PIG_PURCHASE;\
					price += PIG_PRICE;\
				\}\
				while(yangpa < totalyangpa) \{\
					yangpa += YANGPA_PURCHASE;\
					price += YANGPA_PRICE;\
				\}\
				while(pa < totalpa) \{\
					pa += PA_PURCHASE;\
					price += PA_PRICE;\
				\}\
				while(manel < totalmanel) \{\
					manel += MANEL_PURCHASE;\
					price += MANEL_PRICE;\
				\}\
				while(gochu < totalgochu) \{\
					gochu += GOCHU_PURCHASE;\
					price += GOCHU_PRICE;\
				\}\
				pig -= (totalpig);\
				yangpa -= (totalyangpa);\
				pa -= (totalpa);\
				manel -= (totalmanel);\
				gochu -= (totalgochu);\
				resultprice.add(price);\
				price = 0;\
			\}\
			// 
\f5 \'c1\'d8
\f1 1+
\f5 \'bf\'a9
\f1 0.5\
			else if (inbun == 1.5) \{\
				int totalpig = (PIG_RECIPE * 1) + (PIG_RECIPE/2);\
				int totalyangpa = (YANGPA_RECIPE * 1) + (YANGPA_RECIPE/2);\
				int totalpa = (PA_RECIPE * 1) + (PA_RECIPE/2);\
				int totalmanel = (MANEL_RECIPE * 1) + (MANEL_RECIPE/2);\
				int totalgochu = ((GOCHU_RECIPE * 1) + (GOCHU_RECIPE/2))/2;\
				while(pig < totalpig) \{\
					pig += PIG_PURCHASE;\
					price += PIG_PRICE;\
				\}\
				while(yangpa < totalyangpa) \{\
					yangpa += YANGPA_PURCHASE;\
					price += YANGPA_PRICE;\
				\}\
				while(pa < totalpa) \{\
					pa += PA_PURCHASE;\
					price += PA_PRICE;\
				\}\
				while(manel < totalmanel) \{\
					manel += MANEL_PURCHASE;\
					price += MANEL_PRICE;\
				\}\
				while(gochu < totalgochu) \{\
					gochu += GOCHU_PURCHASE;\
					price += GOCHU_PRICE;\
				\}\
				pig -= (totalpig);\
				yangpa -= (totalyangpa);\
				pa -= (totalpa);\
				manel -= (totalmanel);\
				gochu -= (totalgochu);\
				resultprice.add(price);\
				price = 0;\
			\}\
			// 
\f5 \'c1\'d8
\f1 2\
			else if (inbun == 2.0) \{\
				int totalpig = PIG_RECIPE * 2;\
				int totalyangpa = YANGPA_RECIPE * 2;\
				int totalpa = PA_RECIPE * 2;\
				int totalmanel = MANEL_RECIPE * 2;\
				int totalgochu = GOCHU_RECIPE * 2;\
				while(pig < totalpig) \{\
					pig += PIG_PURCHASE;\
					price += PIG_PRICE;\
				\}\
				while(yangpa < totalyangpa) \{\
					yangpa += YANGPA_PURCHASE;\
					price += YANGPA_PRICE;\
				\}\
				while(pa < totalpa) \{\
					pa += PA_PURCHASE;\
					price += PA_PRICE;\
				\}\
				while(manel < totalmanel) \{\
					manel += MANEL_PURCHASE;\
					price += MANEL_PRICE;\
				\}\
				while(gochu < totalgochu) \{\
					gochu += GOCHU_PURCHASE;\
					price += GOCHU_PRICE;\
				\}\
				pig -= (totalpig);\
				yangpa -= (totalyangpa);\
				pa -= (totalpa);\
				manel -= (totalmanel);\
				gochu -= (totalgochu);\
				resultprice.add(price);\
				price = 0;\
			\}\
			// 
\f5 \'c1\'d8
\f1 2+
\f5 \'bf\'a9
\f1 0.5\
			else if (inbun == 2.5) \{\
				int totalpig = (PIG_RECIPE * 2) + (PIG_RECIPE/2);\
				int totalyangpa = (YANGPA_RECIPE * 2) + (YANGPA_RECIPE/2);\
				int totalpa = (PA_RECIPE * 2) + (PA_RECIPE/2);\
				int totalmanel = (MANEL_RECIPE * 2) + (MANEL_RECIPE/2);\
				int totalgochu = ((GOCHU_RECIPE * 2) + (GOCHU_RECIPE/2))/2;\
				while(pig < totalpig) \{\
					pig += PIG_PURCHASE;\
					price += PIG_PRICE;\
				\}\
				while(yangpa < totalyangpa) \{\
					yangpa += YANGPA_PURCHASE;\
					price += YANGPA_PRICE;\
				\}\
				while(pa < totalpa) \{\
					pa += PA_PURCHASE;\
					price += PA_PRICE;\
				\}\
				while(manel < totalmanel) \{\
					manel += MANEL_PURCHASE;\
					price += MANEL_PRICE;\
				\}\
				while(gochu < totalgochu) \{\
					gochu += GOCHU_PURCHASE;\
					price += GOCHU_PRICE;\
				\}\
				pig -= (totalpig);\
				yangpa -= (totalyangpa);\
				pa -= (totalpa);\
				manel -= (totalmanel);\
				gochu -= (totalgochu);\
				resultprice.add(price);\
				price = 0;\
			\}\
			else \{\
				resultprice.clear();\
				resultprice.add(-1);\
				break;\
			\}\
		\}\
		int[] result = new int[resultprice.size()];\
		for (int i = 0; i < resultprice.size(); i++) \{\
			result[i] = resultprice.get(i);\
		\}\
        return result;\
\
6.\
import java.util.HashMap;\
import java.util.Arrays;\
\
class Solution \{\
    public String[] solution(String[][] forms) \{\
        int[] temp = new int[forms.length];\
		for (int i = 0; i < forms.length; i++) \{\
			HashMap<String, Integer> nameMap = new HashMap();\
			\
			String name = forms[i][1];\
			for (int j = 0; j < name.length()-1; j++) \{\
				String key = name.substring(j, j+2);\
				nameMap.put(key, 1);\
			\}\
			for (int j = 0; j < forms.length; j++) \{\
				if (i!=j) \{\
					String cname = forms[j][1];\
					for (int k = 0; k < cname.length()-1; k++) \{\
						String key = cname.substring(k, k+2);\
						if(nameMap.get(key)!=null) \{\
							temp[j] = 1;\
						\}\
					\}\
				\}\
			\
			\}\
		\}\
		int count = 0;\
		for (int i = 0; i < temp.length; i++) \{\
			if (temp[i] == 1) \{\
				count++;\
			\}\
		\}\
		String[] result = new String[count];\
		int index = 0;\
		for (int i = 0; i < temp.length; i++) \{\
			if (temp[i] == 1) \{\
				result[index] = forms[i][0];\
				index++;\
			\}\
		\}\
		Arrays.sort(result);\
		return result;\
    \}\
\}\
\
7.}